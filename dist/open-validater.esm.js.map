{"version":3,"file":"open-validater.es.js.map","sources":["../src/validater.js"],"sourcesContent":["/**\r\n * 表单验证插件\r\n*/\r\nclass validater{\r\n\r\n\t// 插件描述\r\n\tstatic name = \"validater\";\r\n\tstatic author = \"kaijian\";\r\n\tstatic version = \"v1.0.0\";\r\n\tstatic description = \"基于js开发的表达验证插件\";\r\n\tstatic date = \"2024-06-12\";\r\n\r\n\t// 验证结果转换\r\n\tstatic #isTure (condition){\r\n\t\treturn !condition ? false : true;\r\n\t}\r\n\r\n\t// 内置验证规则\r\n\tstatic rules = {\r\n\t    // 检查值是否为空\r\n\t    required: (value) =>{ \r\n\t    \tlet result = value == '' || value == undefined || value == null;\r\n\t    \treturn !validater.#isTure(result);\r\n\t    },\r\n\t    // 检查值是否是手机号\r\n\t    phone: (value) =>{\r\n\t        const checkValue = /^1(3[0-9]|4[01456879]|5[0-35-9]|6[2567]|7[0-8]|8[0-9]|9[0-35-9])\\d{8}$/;\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    },\r\n\t    // 检查值是否是网址\r\n\t    http:  (value) =>{\r\n\t        const checkValue = /^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\*\\+,;=.]+$/;\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    },\r\n\t    // 检查值是否是邮箱\r\n\t    email:  (value) =>{\r\n\t        const checkValue = /^\\w+([  -+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/g;\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    },\r\n\t    //检查值是否是中文\r\n\t    string: (value) =>{\r\n\t        const checkValue = /^[\\u4e00-\\u9fa5]*$/;\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    },\r\n\t    //检查字符串是否是中文或英文或中文+英文,没有值则不判断\r\n\t    strEng: (value) =>{\r\n\t        const checkValue = /^[\\u4e00-\\u9fa5a-zA-Z]*$/;\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    },\r\n\t    //检查字符串是否是中文或英文或中文+英文+数字，没有值则不判断\r\n\t    strEngInt: (value)=>{\r\n\t        const checkValue = /^[\\u4e00-\\u9fa5a-zA-Z0-9]*$/;\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    },\r\n\t    //检查字符串是否是英文或数字\r\n\t    engAndInt: (value) =>{\r\n\t        const checkValue = /^[a-zA-Z0-9]*$/;\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    },\r\n\t    //检查字符串是否是英文,数字\r\n\t    engInt: ( value ) => {\r\n\t        const checkValue = /^[a-zA-Z]([-_a-zA-Z0-9]{5,19})+$/;//6至20位，以字母开头，字母，数字，减号，下划线\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    },\r\n\t    //检查电话号码座机\r\n\t    tel: (value) => {\r\n\t        const checkValue = /^\\d{3}-\\d{8}|\\d{4}-\\d{7,8}/;\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    },\r\n\t    //检查字符串是否有特殊符号（是返回false，否返回true）\r\n\t    symbol : (value) => {\r\n\t        const checkValue = /[`~!@#$^&*()《》=|{}':;',\\\\\\[\\]\\.<>\\/?~！@#￥……&*（）——|{}【】'；：\"\"'。，、？\\s]/g;\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    },\r\n\t    //检查密码是否格式正确(8-16位+字母+特殊符号+数字)\r\n\t    password: ( value ) => {\r\n\t        const checkValue = /^(?=.*\\d)(?=.*[a-zA-Z])(?=.*[~!@#$%^&*])[\\da-zA-Z~!@#$%^&*]{8,16}$/;\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    },\r\n\t    // 检查文本\r\n\t    text: ( value ) => {\r\n\t        const checkValue = /^[\\u4e00-\\u9fa5a-zA-Z0-9,.!?:，。？！]*$/;\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    },\r\n\t    // 检查整数格式\r\n\t    int: ( value ) => {\r\n\t        const checkValue = /^[0-9]*$/g;\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    }\r\n\t}\r\n\r\n\t// 添加自定义规则\r\n    static addRule(rule){\r\n        // 判断是否有规则名和规则入口函数\r\n        if(typeof rule.name !== 'string' || typeof rule.handle !== 'function' ) return false;\r\n        // 定义当前路由对象\r\n        let itemRule = {};\r\n        // 添加路由信息到路由对象\r\n        itemRule[rule.name] = rule.handle;\r\n        // 整合路由规则到内置规则中\r\n        validater.rules = { ...validater.rules,...itemRule};\r\n    }\r\n\r\n    /**\r\n     * 验证单个字段\r\n     * @param rule: 单个验证对象\r\n     * @param fn:function 回调函数\r\n    */\r\n    static test(rule,fn){\r\n        return new Promise((j,r)=>{\r\n            \r\n            // 验证格式是否正确\r\n            validater.#check(rule).then(res=>{\r\n\r\n                if(res.status){\r\n\r\n                \t// 判断验证结果标识符\r\n\t\t            let mark = true;\r\n\r\n\t\t        \t// 验证返回信息\r\n\t\t            let result = {\r\n\t\t            \tstatus: true,\r\n\t\t            \tname: rule.name || '',\r\n\t\t            \tmessage: '验证通过'\r\n\t\t            };\r\n\r\n                    // 获取验证目标字段值\r\n                    let value = rule.value;\r\n\r\n                    // 获取验证目标配置的规则\r\n                    let currentRules = rule.rules;\r\n                    \r\n                    // 循环验证规则\r\n                    for( let key in currentRules){\r\n\r\n                    \t// 当前字段如果没有设置required规则，只有在值存在的情况再验证\r\n\t                    if(!currentRules[\"required\"] && value && !validater.rules[key](value)){\r\n\t                        result.status = false;\r\n\t                        result.message = currentRules[key];\r\n\t                        mark = false;\r\n\t                        break;\r\n\t                    }\r\n\r\n\t                    // 当前验证规则是required，直接验证\r\n\t                    if(key == \"required\" && !validater.rules[key](value)){\r\n\t                        result.status = false;\r\n\t                        result.message = currentRules[key];\r\n\t                        mark = false;\r\n\t                        break;\r\n\t                    }\r\n                    }\r\n\r\n                 \tif(!mark){\r\n                    \t// 自动更新错误提示\r\n                    \tif(rule.error && Object.prototype.toString.call(rule.error) == '[object Object]'){\r\n                    \t\t// 更新错误提示文本到dom\r\n                    \t\tif(rule.error.message){\r\n                    \t\t\tlet errorElem = document.querySelector(rule.error.message.id);\r\n\t                    \t\tif(errorElem){\r\n\t                    \t\t\terrorElem.innerText = result.message;\r\n\t                    \t\t}\r\n\t                    \t\tif(errorElem && rule.error.message.styles){\r\n\t                    \t\t\terrorElem.style.cssText = rule.error.message.styles;\r\n\t                    \t\t}\r\n                    \t\t}\r\n                    \t\t// 更新input框样式\r\n                    \t\tif(rule.error.input){\r\n                    \t\t\tlet inputElem = document.querySelector(rule.error.input.id);\r\n\t                    \t\tif(inputElem){\r\n\t                    \t\t\tinputElem.innerText = result.message;\r\n\t                    \t\t}\r\n\t                    \t\tif(inputElem && rule.error.input.styles){\r\n\t                    \t\t\tinputElem.style.cssText = rule.error.input.styles;\r\n\t                    \t\t}\r\n                    \t\t}\r\n                    \t\t\r\n                    \t}\r\n                    }\r\n                    if(typeof fn === 'function'){\r\n                    \tfn(result);\r\n                    }\r\n                    j(result);\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 验证多个字段\r\n     * @param rule: array批量验证数组\r\n     * @param fn:function 回调函数\r\n    */\r\n    static tests(rules,fn){\r\n\r\n        return new Promise((j,r)=>{\r\n\r\n        \t// 判断验证结果标识符\r\n            let mark = true;\r\n\r\n            // 验证返回信息\r\n            let result = {\r\n            \tstatus: true,\r\n            \tname: '',\r\n            \tmessage: '验证通过'\r\n            };\r\n\r\n        \tfor(let i = 0; i < rules.length; i ++){\r\n\r\n            \t// 当前数据\r\n            \tlet item = rules[i];\r\n\r\n                // 获取验证目标字段值\r\n                let value = item.value;\r\n\r\n                // 获取验证目标配置的规则\r\n                let currentRules = item.rules;\r\n\r\n                // 赋值当前验证字段到返回对象\r\n                result.name = item.name;\r\n               \r\n                for( let key in currentRules){\r\n                \t\r\n                    // 当前字段如果没有设置required规则，只有在值存在的情况再验证\r\n                    if(!currentRules[\"required\"] && value && !validater.rules[key](value)){\r\n                        result.status = false;\r\n                        result.message = currentRules[key];\r\n                        mark = false;\r\n                        break;\r\n                    }\r\n\r\n                    // 当前验证规则是required，直接验证\r\n                    if(key == \"required\" && !validater.rules[key](value)){\r\n                        result.status = false;\r\n                        result.message = currentRules[key];\r\n                        mark = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if(!mark){\r\n\r\n                \t// 自动更新错误提示\r\n\t\t        \tif(item.error && Object.prototype.toString.call(item.error) == '[object Object]'){\r\n\t\t        \t\t// 更新错误提示文本到dom\r\n\t\t        \t\tif(item.error.message){\r\n\t\t        \t\t\tlet errorElem = document.querySelector(item.error.message.id);\r\n\t\t            \t\tif(errorElem){\r\n\t\t            \t\t\terrorElem.innerText = result.message;\r\n\t\t            \t\t}\r\n\t\t            \t\tif(errorElem && item.error.message.styles){\r\n\t\t            \t\t\terrorElem.style.cssText = item.error.message.styles;\r\n\t\t            \t\t}\r\n\t\t        \t\t}\r\n\t\t        \t\t// 更新input框样式\r\n\t\t        \t\tif(item.error.input){\r\n\t\t        \t\t\tlet inputElem = document.querySelector(item.error.input.id);\r\n\t\t            \t\tif(inputElem){\r\n\t\t            \t\t\tinputElem.innerText = result.message;\r\n\t\t            \t\t}\r\n\t\t            \t\tif(inputElem && item.error.input.styles){\r\n\t\t            \t\t\tinputElem.style.cssText = item.error.input.styles;\r\n\t\t            \t\t}\r\n\t\t        \t\t}\r\n\t\t        \t\t\r\n\t\t        \t}\r\n                \tbreak;\r\n                }\r\n            }\r\n\r\n\t        if(typeof fn === 'function'){\r\n            \tfn(result);\r\n            }\r\n            j(result);\r\n        })\r\n    }\r\n\r\n   \r\n\r\n    // 验证单字段参数格式是否正确\r\n    static #check(rule){\r\n        return new Promise((j,r)=>{\r\n            // 判断rule参数是不是对象格式\r\n            const result = validater.#checkObject(rule,'验证规则参数必须是object,当前参数类型不正确');\r\n            if(!result.status){\r\n                j(result);\r\n            }\r\n            // 判断是否含有name和rules\r\n            if(typeof rule.name !== 'string' || !validater.#checkObject(rule.rules).status){\r\n                j({\r\n                    result: false,\r\n                    message: '验证规则对象必须包含name属性和rules属性'\r\n                })\r\n            }\r\n            j({\r\n                status: true,\r\n            })\r\n        })\r\n    }\r\n\r\n    // 检测参数是否是对象\r\n    static #checkObject(rule,warn,message,){\r\n    \t// 判断类型\r\n        const check = Object.prototype.toString.call(rule) == '[object Object]';\r\n        // 返回结果\r\n        let result = {\r\n        \tstatus: true,\r\n            message: message\r\n        }\r\n        if(!check)result.status = false;\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default validater;\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["validater","_classCallCheck","_createClass","key","value","rule","name","handle","itemRule","rules","_objectSpread","fn","Promise","j","r","_check","call","then","res","status","mark","result","message","currentRules","error","Object","prototype","toString","errorElem","document","querySelector","id","innerText","styles","style","cssText","input","inputElem","i","length","item","_isTure","condition","_checkObject","warn","_validater","_defineProperty","required","undefined","phone","test","http","email","string","strEng","strEngInt","engAndInt","engInt","tel","symbol","password","text","int"],"mappings":"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"}