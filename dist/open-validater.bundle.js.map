{"version":3,"file":"open-validater.bundle.js.map","sources":["../src/validater.js"],"sourcesContent":["/**\r\n * 表单验证插件\r\n*/\r\nclass validater{\r\n\r\n\t// 插件描述\r\n\tstatic name = \"validater\";\r\n\tstatic author = \"kaijian\";\r\n\tstatic version = \"v1.0.0-beta\";\r\n\tstatic description = \"基于js开发的表达验证插件\";\r\n\tstatic date = \"2024-06-12\";\r\n\r\n\t// 验证结果转换\r\n\tstatic #isTure (condition){\r\n\t\treturn !condition ? false : true;\r\n\t}\r\n\r\n\t// 内置验证规则\r\n\tstatic rules = {\r\n\t    // 检查值是否为空\r\n\t    required: (value) =>{ \r\n\t    \tlet result = value == '' || value == undefined || value == null;\r\n\t    \treturn !validater.#isTure(result);\r\n\t    },\r\n\t    // 检查值是否是手机号\r\n\t    phone: (value) =>{\r\n\t        const checkValue = /^1(3[0-9]|4[01456879]|5[0-35-9]|6[2567]|7[0-8]|8[0-9]|9[0-35-9])\\d{8}$/;\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    },\r\n\t    // 检查值是否是网址\r\n\t    http:  (value) =>{\r\n\t        const checkValue = /^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\*\\+,;=.]+$/;\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    },\r\n\t    // 检查值是否是邮箱\r\n\t    email:  (value) =>{\r\n\t        const checkValue = /^\\w+([  -+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/g;\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    },\r\n\t    //检查值是否是中文\r\n\t    string: (value) =>{\r\n\t        const checkValue = /^[\\u4e00-\\u9fa5]*$/;\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    },\r\n\t    //检查字符串是否是中文或英文或中文+英文,没有值则不判断\r\n\t    strEng: (value) =>{\r\n\t        const checkValue = /^[\\u4e00-\\u9fa5a-zA-Z]*$/;\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    },\r\n\t    //检查字符串是否是中文或英文或中文+英文+数字，没有值则不判断\r\n\t    strEngInt: (value)=>{\r\n\t        const checkValue = /^[\\u4e00-\\u9fa5a-zA-Z0-9]*$/;\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    },\r\n\t    //检查字符串是否是英文或数字\r\n\t    engAndInt: (value) =>{\r\n\t        const checkValue = /^[a-zA-Z0-9]*$/;\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    },\r\n\t    //检查字符串是否是英文,数字\r\n\t    engInt: ( value ) => {\r\n\t        const checkValue = /^[a-zA-Z]([-_a-zA-Z0-9]{5,19})+$/;//6至20位，以字母开头，字母，数字，减号，下划线\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    },\r\n\t    //检查电话号码座机\r\n\t    tel: (value) => {\r\n\t        const checkValue = /^\\d{3}-\\d{8}|\\d{4}-\\d{7,8}/;\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    },\r\n\t    //检查字符串是否有特殊符号（是返回false，否返回true）\r\n\t    symbol : (value) => {\r\n\t        const checkValue = /[`~!@#$^&*()《》=|{}':;',\\\\\\[\\]\\.<>\\/?~！@#￥……&*（）——|{}【】'；：\"\"'。，、？\\s]/g;\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    },\r\n\t    //检查密码是否格式正确(8-16位+字母+特殊符号+数字)\r\n\t    password: ( value ) => {\r\n\t        const checkValue = /^(?=.*\\d)(?=.*[a-zA-Z])(?=.*[~!@#$%^&*])[\\da-zA-Z~!@#$%^&*]{8,16}$/;\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    },\r\n\t    // 检查文本\r\n\t    text: ( value ) => {\r\n\t        const checkValue = /^[\\u4e00-\\u9fa5a-zA-Z0-9,.!?:，。？！]*$/;\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    },\r\n\t    // 检查整数格式\r\n\t    int: ( value ) => {\r\n\t        const checkValue = /^[0-9]*$/g;\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    }\r\n\t}\r\n\r\n\t// 添加自定义规则\r\n    static addRule(rule){\r\n        // 判断是否有规则名和规则入口函数\r\n        if(typeof rule.name !== 'string' || typeof rule.handle !== 'function' ) return false;\r\n        // 定义当前路由对象\r\n        let itemRule = {};\r\n        // 添加路由信息到路由对象\r\n        itemRule[rule.name] = rule.handle;\r\n        // 整合路由规则到内置规则中\r\n        validater.rules = { ...validater.rules,...itemRule};\r\n    }\r\n\r\n    /**\r\n     * 验证单个字段\r\n     * @param rule: 单个验证对象\r\n     * @param fn:function 回调函数\r\n    */\r\n    static test(rule,fn){\r\n        return new Promise((j,r)=>{\r\n            // 验证格式是否正确\r\n            validater.#check(rule).then(res=>{\r\n                if(res.status){\r\n                    // 获取验证目标字段值\r\n                    let value = rule.value;\r\n                    // 获取验证目标配置的规则\r\n                    let rules = rule.rules;\r\n                    // 验证返回信息\r\n                    let result = {\r\n                    \tstatus: true,\r\n                    \tname: rule.name || '',\r\n                    \tmessage: ''\r\n                    };\r\n                    // 判断验证结果标识符\r\n                    let mark = true;\r\n                    // 循环验证规则\r\n                    for( let key in rules){\r\n                        if(!(validater.rules[key](value))){\r\n                            result.status = false;\r\n                            result.message = rules[key];\r\n                            mark = false;\r\n                        }\r\n                        if(!mark){\r\n                        \t// 自动更新错误提示\r\n\t                    \tif(item.error && Object.prototype.toString.call(item.error) == '[object Object]'){\r\n\t                    \t\t// 更新错误提示文本到dom\r\n\t                    \t\tif(item.error.message){\r\n\t                    \t\t\tlet errorElem = document.querySelector(item.error.message.id);\r\n\t\t                    \t\tif(errorElem){\r\n\t\t                    \t\t\terrorElem.innerText = result.message;\r\n\t\t                    \t\t}\r\n\t\t                    \t\tif(errorElem && item.error.message.styles){\r\n\t\t                    \t\t\terrorElem.style.cssText = item.error.message.styles;\r\n\t\t                    \t\t}\r\n\t                    \t\t}\r\n\t                    \t\t// 更新input框样式\r\n\t                    \t\tif(item.error.input){\r\n\t                    \t\t\tlet inputElem = document.querySelector(item.error.input.id);\r\n\t\t                    \t\tif(inputElem){\r\n\t\t                    \t\t\tinputElem.innerText = result.message;\r\n\t\t                    \t\t}\r\n\t\t                    \t\tif(inputElem && item.error.input.styles){\r\n\t\t                    \t\t\tinputElem.style.cssText = item.error.input.styles;\r\n\t\t                    \t\t}\r\n\t                    \t\t}\r\n\t                    \t\t\r\n\t                    \t}\r\n                        \tif(typeof fn === 'function'){\r\n\t                        \tfn(result);\r\n\t                        }\r\n\t                        j(result);\r\n\t                    }\r\n                    }\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 验证多个字段\r\n     * @param rule: array批量验证数组\r\n     * @param fn:function 回调函数\r\n    */\r\n    static tests(rules,fn){\r\n        return new Promise((j,r)=>{\r\n            rules.forEach(item=>{\r\n                // 获取验证目标字段值\r\n                let value = item.value;\r\n                // 获取验证目标配置的规则\r\n                let rules = item.rules;\r\n                // 验证返回信息\r\n                let result = {\r\n                \tstatus: true,\r\n                \tname: item.name || '',\r\n                \tmessage: ''\r\n                };\r\n                // 判断验证结果标识符\r\n                let mark = true;\r\n                for( let key in rules){\r\n                    if(!(validater.rules[key](value))){\r\n                        result.status = false;\r\n                        result.message = rules[key];\r\n                        mark = false;\r\n                    }\r\n                    if(!mark){\r\n                    \t// 自动更新错误提示\r\n                    \tif(item.error && Object.prototype.toString.call(item.error) == '[object Object]'){\r\n                    \t\t// 更新错误提示文本到dom\r\n                    \t\tif(item.error.message){\r\n                    \t\t\tlet errorElem = document.querySelector(item.error.message.id);\r\n\t                    \t\tif(errorElem){\r\n\t                    \t\t\terrorElem.innerText = result.message;\r\n\t                    \t\t}\r\n\t                    \t\tif(errorElem && item.error.message.styles){\r\n\t                    \t\t\terrorElem.style.cssText = item.error.message.styles;\r\n\t                    \t\t}\r\n                    \t\t}\r\n                    \t\t// 更新input框样式\r\n                    \t\tif(item.error.input){\r\n                    \t\t\tlet inputElem = document.querySelector(item.error.input.id);\r\n\t                    \t\tif(inputElem){\r\n\t                    \t\t\tinputElem.innerText = result.message;\r\n\t                    \t\t}\r\n\t                    \t\tif(inputElem && item.error.input.styles){\r\n\t                    \t\t\tinputElem.style.cssText = item.error.input.styles;\r\n\t                    \t\t}\r\n                    \t\t}\r\n                    \t\t\r\n                    \t}\r\n                    \tif(typeof fn === 'function'){\r\n                        \tfn(result);\r\n                        }\r\n                        j(result);\r\n                    }\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    // 当input输入报错后，开启重新输入即恢复默认样式\r\n    static onReset(){\r\n\r\n    }\r\n\r\n    // 验证单字段参数格式是否正确\r\n    static #check(rule){\r\n        return new Promise((j,r)=>{\r\n            // 判断rule参数是不是对象格式\r\n            const result = validater.#checkObject(rule,'验证规则参数必须是object,当前参数类型不正确');\r\n            if(!result.status){\r\n                j(result);\r\n            }\r\n            // 判断是否含有name和rules\r\n            if(typeof rule.name !== 'string' || !validater.#checkObject(rule.rules).status){\r\n                j({\r\n                    result: false,\r\n                    message: '验证规则对象必须包含name属性和rules属性'\r\n                })\r\n            }\r\n            j({\r\n                status: true,\r\n            })\r\n        })\r\n    }\r\n\r\n    // 检测参数是否是对象\r\n    static #checkObject(rule,warn,message,){\r\n    \t// 判断类型\r\n        const check = Object.prototype.toString.call(rule) == '[object Object]';\r\n        // 返回结果\r\n        let result = {\r\n        \tstatus: true,\r\n            message: message\r\n        }\r\n        if(!check)result.status = false;\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default validater;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["validater","_classCallCheck","key","value","rule","name","handle","itemRule","rules","_objectSpread","fn","Promise","j","r","_check","call","then","res","status","result","message","mark","item","error","Object","prototype","toString","errorElem","document","querySelector","id","innerText","styles","style","cssText","input","inputElem","forEach","_isTure","condition","_checkObject","warn","_validater","_defineProperty","required","undefined","phone","test","http","email","string","strEng","strEngInt","engAndInt","engInt","tel","symbol","password","text","int"],"mappings":"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"}