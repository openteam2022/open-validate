{"version":3,"file":"open-validater.bundle.js.map","sources":["../src/validater.js","../src/main.js"],"sourcesContent":["/**\r\n * 表单验证插件\r\n*/\r\nclass validater{\r\n\r\n\t// 插件描述\r\n\tstatic name = \"validater\";\r\n\tstatic author = \"kaijian\";\r\n\tstatic version = \"v1.0.0\";\r\n\tstatic description = \"基于js开发的表达验证插件\";\r\n\tstatic date = \"2024-06-12\";\r\n\r\n\t// 验证结果转换\r\n\tstatic #isTure (condition){\r\n\t\treturn !condition ? false : true;\r\n\t}\r\n\r\n\t// 内置验证规则\r\n\tstatic rules = {\r\n\t    // 检查值是否为空\r\n\t    required: (value) =>{ \r\n\t    \tlet result = value == '' || value == undefined || value == null;\r\n\t    \treturn !validater.#isTure(result);\r\n\t    },\r\n\t    // 检查值是否是手机号\r\n\t    phone: (value) =>{\r\n\t        const checkValue = /^1(3[0-9]|4[01456879]|5[0-35-9]|6[2567]|7[0-8]|8[0-9]|9[0-35-9])\\d{8}$/;\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    },\r\n\t    // 检查值是否是网址\r\n\t    http:  (value) =>{\r\n\t        const checkValue = /^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\*\\+,;=.]+$/;\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    },\r\n\t    // 检查值是否是邮箱\r\n\t    email:  (value) =>{\r\n\t        const checkValue = /^\\w+([  -+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/g;\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    },\r\n\t    //检查值是否是中文\r\n\t    string: (value) =>{\r\n\t        const checkValue = /^[\\u4e00-\\u9fa5]*$/;\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    },\r\n\t    //检查字符串是否是中文或英文或中文+英文,没有值则不判断\r\n\t    strEng: (value) =>{\r\n\t        const checkValue = /^[\\u4e00-\\u9fa5a-zA-Z]*$/;\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    },\r\n\t    //检查字符串是否是中文或英文或中文+英文+数字，没有值则不判断\r\n\t    strEngInt: (value)=>{\r\n\t        const checkValue = /^[\\u4e00-\\u9fa5a-zA-Z0-9]*$/;\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    },\r\n\t    //检查字符串是否是英文或数字\r\n\t    engAndInt: (value) =>{\r\n\t        const checkValue = /^[a-zA-Z0-9]*$/;\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    },\r\n\t    //检查字符串是否是英文,数字\r\n\t    engInt: ( value ) => {\r\n\t        const checkValue = /^[a-zA-Z]([-_a-zA-Z0-9]{5,19})+$/;//6至20位，以字母开头，字母，数字，减号，下划线\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    },\r\n\t    //检查电话号码座机\r\n\t    tel: (value) => {\r\n\t        const checkValue = /^\\d{3}-\\d{8}|\\d{4}-\\d{7,8}/;\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    },\r\n\t    //检查字符串是否有特殊符号（是返回false，否返回true）\r\n\t    symbol : (value) => {\r\n\t        const checkValue = /[`~!@#$^&*()《》=|{}':;',\\\\\\[\\]\\.<>\\/?~！@#￥……&*（）——|{}【】'；：\"\"'。，、？\\s]/g;\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    },\r\n\t    //检查密码是否格式正确(8-16位+字母+特殊符号+数字)\r\n\t    password: ( value ) => {\r\n\t        const checkValue = /^(?=.*\\d)(?=.*[a-zA-Z])(?=.*[~!@#$%^&*])[\\da-zA-Z~!@#$%^&*]{8,16}$/;\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    },\r\n\t    // 检查文本\r\n\t    text: ( value ) => {\r\n\t        const checkValue = /^[\\u4e00-\\u9fa5a-zA-Z0-9,.!?:，。？！]*$/;\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    },\r\n\t    // 检查整数格式\r\n\t    int: ( value ) => {\r\n\t        const checkValue = /^[0-9]*$/g;\r\n\t        return validater.#isTure(checkValue.test(value));\r\n\t    }\r\n\t}\r\n\r\n\t// 添加自定义规则\r\n    static addRule(rule){\r\n        // 判断是否有规则名和规则入口函数\r\n        if(typeof rule.name !== 'string' || typeof rule.handle !== 'function' ) return false;\r\n        // 定义当前路由对象\r\n        let itemRule = {};\r\n        // 添加路由信息到路由对象\r\n        itemRule[rule.name] = rule.handle;\r\n        // 整合路由规则到内置规则中\r\n        validater.rules = { ...validater.rules,...itemRule};\r\n    }\r\n\r\n    /**\r\n     * 验证单个字段\r\n     * @param rule: 单个验证对象\r\n     * @param fn:function 回调函数\r\n    */\r\n    static test(rule,fn){\r\n        return new Promise((j,r)=>{\r\n            \r\n            // 验证格式是否正确\r\n            validater.#check(rule).then(res=>{\r\n\r\n                if(res.status){\r\n\r\n                \t// 判断验证结果标识符\r\n\t\t            let mark = true;\r\n\r\n\t\t        \t// 验证返回信息\r\n\t\t            let result = {\r\n\t\t            \tstatus: true,\r\n\t\t            \tname: rule.name || '',\r\n\t\t            \tmessage: '验证通过'\r\n\t\t            };\r\n\r\n                    // 获取验证目标字段值\r\n                    let value = rule.value;\r\n\r\n                    // 获取验证目标配置的规则\r\n                    let currentRules = rule.rules;\r\n                    \r\n                    // 循环验证规则\r\n                    for( let key in currentRules){\r\n\r\n                    \t// 当前字段如果没有设置required规则，只有在值存在的情况再验证\r\n\t                    if(!currentRules[\"required\"] && value && !validater.rules[key](value)){\r\n\t                        result.status = false;\r\n\t                        result.message = currentRules[key];\r\n\t                        mark = false;\r\n\t                        break;\r\n\t                    }\r\n\r\n\t                    // 当前验证规则是required，直接验证\r\n\t                    if(key == \"required\" && !validater.rules[key](value)){\r\n\t                        result.status = false;\r\n\t                        result.message = currentRules[key];\r\n\t                        mark = false;\r\n\t                        break;\r\n\t                    }\r\n                    }\r\n\r\n                 \tif(!mark){\r\n                    \t// 自动更新错误提示\r\n                    \tif(rule.error && Object.prototype.toString.call(rule.error) == '[object Object]'){\r\n                    \t\t// 更新错误提示文本到dom\r\n                    \t\tif(rule.error.message){\r\n                    \t\t\tlet errorElem = document.querySelector(rule.error.message.id);\r\n\t                    \t\tif(errorElem){\r\n\t                    \t\t\terrorElem.innerText = result.message;\r\n\t                    \t\t}\r\n\t                    \t\tif(errorElem && rule.error.message.styles){\r\n\t                    \t\t\terrorElem.style.cssText = rule.error.message.styles;\r\n\t                    \t\t}\r\n                    \t\t}\r\n                    \t\t// 更新input框样式\r\n                    \t\tif(rule.error.input){\r\n                    \t\t\tlet inputElem = document.querySelector(rule.error.input.id);\r\n\t                    \t\tif(inputElem){\r\n\t                    \t\t\tinputElem.innerText = result.message;\r\n\t                    \t\t}\r\n\t                    \t\tif(inputElem && rule.error.input.styles){\r\n\t                    \t\t\tinputElem.style.cssText = rule.error.input.styles;\r\n\t                    \t\t}\r\n                    \t\t}\r\n                    \t\t\r\n                    \t}\r\n                    }\r\n                    if(typeof fn === 'function'){\r\n                    \tfn(result);\r\n                    }\r\n                    j(result);\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 验证多个字段\r\n     * @param rule: array批量验证数组\r\n     * @param fn:function 回调函数\r\n    */\r\n    static tests(rules,fn){\r\n\r\n        return new Promise((j,r)=>{\r\n\r\n        \t// 判断验证结果标识符\r\n            let mark = true;\r\n\r\n            // 验证返回信息\r\n            let result = {\r\n            \tstatus: true,\r\n            \tname: '',\r\n            \tmessage: '验证通过'\r\n            };\r\n\r\n        \tfor(let i = 0; i < rules.length; i ++){\r\n\r\n            \t// 当前数据\r\n            \tlet item = rules[i];\r\n\r\n                // 获取验证目标字段值\r\n                let value = item.value;\r\n\r\n                // 获取验证目标配置的规则\r\n                let currentRules = item.rules;\r\n\r\n                // 赋值当前验证字段到返回对象\r\n                result.name = item.name;\r\n               \r\n                for( let key in currentRules){\r\n                \t\r\n                    // 当前字段如果没有设置required规则，只有在值存在的情况再验证\r\n                    if(!currentRules[\"required\"] && value && !validater.rules[key](value)){\r\n                        result.status = false;\r\n                        result.message = currentRules[key];\r\n                        mark = false;\r\n                        break;\r\n                    }\r\n\r\n                    // 当前验证规则是required，直接验证\r\n                    if(key == \"required\" && !validater.rules[key](value)){\r\n                        result.status = false;\r\n                        result.message = currentRules[key];\r\n                        mark = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if(!mark){\r\n\r\n                \t// 自动更新错误提示\r\n\t\t        \tif(item.error && Object.prototype.toString.call(item.error) == '[object Object]'){\r\n\t\t        \t\t// 更新错误提示文本到dom\r\n\t\t        \t\tif(item.error.message){\r\n\t\t        \t\t\tlet errorElem = document.querySelector(item.error.message.id);\r\n\t\t            \t\tif(errorElem){\r\n\t\t            \t\t\terrorElem.innerText = result.message;\r\n\t\t            \t\t}\r\n\t\t            \t\tif(errorElem && item.error.message.styles){\r\n\t\t            \t\t\terrorElem.style.cssText = item.error.message.styles;\r\n\t\t            \t\t}\r\n\t\t        \t\t}\r\n\t\t        \t\t// 更新input框样式\r\n\t\t        \t\tif(item.error.input){\r\n\t\t        \t\t\tlet inputElem = document.querySelector(item.error.input.id);\r\n\t\t            \t\tif(inputElem){\r\n\t\t            \t\t\tinputElem.innerText = result.message;\r\n\t\t            \t\t}\r\n\t\t            \t\tif(inputElem && item.error.input.styles){\r\n\t\t            \t\t\tinputElem.style.cssText = item.error.input.styles;\r\n\t\t            \t\t}\r\n\t\t        \t\t}\r\n\t\t        \t\t\r\n\t\t        \t}\r\n                \tbreak;\r\n                }\r\n            }\r\n\r\n\t        if(typeof fn === 'function'){\r\n            \tfn(result);\r\n            }\r\n            j(result);\r\n        })\r\n    }\r\n\r\n   \r\n\r\n    // 验证单字段参数格式是否正确\r\n    static #check(rule){\r\n        return new Promise((j,r)=>{\r\n            // 判断rule参数是不是对象格式\r\n            const result = validater.#checkObject(rule,'验证规则参数必须是object,当前参数类型不正确');\r\n            if(!result.status){\r\n                j(result);\r\n            }\r\n            // 判断是否含有name和rules\r\n            if(typeof rule.name !== 'string' || !validater.#checkObject(rule.rules).status){\r\n                j({\r\n                    result: false,\r\n                    message: '验证规则对象必须包含name属性和rules属性'\r\n                })\r\n            }\r\n            j({\r\n                status: true,\r\n            })\r\n        })\r\n    }\r\n\r\n    // 检测参数是否是对象\r\n    static #checkObject(rule,warn,message,){\r\n    \t// 判断类型\r\n        const check = Object.prototype.toString.call(rule) == '[object Object]';\r\n        // 返回结果\r\n        let result = {\r\n        \tstatus: true,\r\n            message: message\r\n        }\r\n        if(!check)result.status = false;\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default validater;\r\n\r\n\r\n\r\n\r\n\r\n","// src/main.js\r\nimport validater from './validater.js';\r\n\r\nexport default validater;"],"names":["validater","_classCallCheck","_createClass","key","value","addRule","rule","name","handle","itemRule","rules","_objectSpread","test","fn","Promise","j","r","_check","call","then","res","status","mark","result","message","currentRules","error","Object","prototype","toString","errorElem","document","querySelector","id","innerText","styles","style","cssText","input","inputElem","tests","i","length","item","_validater","_isTure","condition","_checkObject","warn","check","_defineProperty","required","undefined","phone","checkValue","http","email","string","strEng","strEngInt","engAndInt","engInt","tel","symbol","password","text","int"],"mappings":"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"}